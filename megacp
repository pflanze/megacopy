#!/usr/bin/perl -w

# Copyright 2014 by Christian Jaeger. Published as Open Source
# software under the MIT License. See COPYING.md

(my $email='ch%christianjaeger,ch')=~ tr/%,/@./;

use strict; use warnings FATAL => 'uninitialized';

use Cwd 'abs_path';

our ($mydir, $myname);
BEGIN {
    my $location= (-l $0) ? abs_path ($0) : $0;
    $location=~ /(.*?)([^\/]+?)_?\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}

our $MAX_SMALL_FILE= 8*1024*1024;
our $MKDIR_MASK= 0700;

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [--] sourcepath targetpath

  Like cp -a sourcepath targetpath, except:

   - only does sparse copying for files over $MAX_SMALL_FILE bytes
   - with small files, loses sub-second timestamp precision
   (- does not care about ACL or possibly other kind of metadata; does cp?)

  and should hopefully be less RAM hungry with huge numbers of
  hard-linked files.

  $myname, by default, stops when it can't write to the target, but
  continues with a warning when it can't read from the source or can't
  set permissions on the target.

  Options (they can be abbreviated as long as there's no ambiguity):

    --dry-run    only run the scanning and sorting phase,
                 then stop (leaving the tempfiles in place)
    --stop-on-errors
                 also stop when encountering errors reading from the
                 source or setting permissions on the target.
    --tmp path   use path as the base (instead of \$TMPDIR or /tmp) for the
                 tempfiles.

  (Christian Jaeger <$email>)
";
exit (@_ ? 1 : 0);
}

use Getopt::Long;
our $verbose=0;
our ($opt_dry, $opt_stop_on_errors, $opt_tmp);
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
	   "dry-run"=> \$opt_dry,
	   "stop-on-errors"=> \$opt_stop_on_errors,
	   "tmp=s"=> \$opt_tmp,
	   ) or exit 1;
usage unless @ARGV==2;

our ($source,$_target)=@ARGV;

use lib "$mydir/lib";

use POSIX 'EEXIST';
use PFLANZE::Fileutils ":all";
$PFLANZE::Fileutils::verbose= $verbose;
use PFLANZE::copy "xcopy_fast";
use PFLANZE::Xstat ":all";

our @STORE_STATFIELDS= qw(dev ino mode uid gid size atime mtime);
sub stat_from_fields {
    @_ == @STORE_STATFIELDS or die "received wrong number of fields";
    my $s= bless [], "Chj::xperlfunc::xstat";
    for (my $i=0; $i< @STORE_STATFIELDS; $i++) {
	my $m= "set_".$STORE_STATFIELDS[$i];
	$s->$m($_[$i]);
    }
    $s
}

sub perhaps_skip_errors (&) {
    my ($thunk)=@_;
    eval {
	&$thunk;
	1;
    } || do {
	my $e= $@;
	die $e if ($opt_stop_on_errors
		   or
		   UNIVERSAL::isa($e, "PFLANZE::Exception::error_writing_to_target"));
	print STDERR "Warning: $e";
    }
}


our $target =
  -d $_target ?
  do {
      my $b= basename($source);
      $b eq ".." ? $_target : $_target . "/". $b
  }
  : $_target;

our $files= xtempfile $opt_tmp;
our $dirs= xtempfile $opt_tmp;

sub scanprint {
    my ($subpath)=@_;
    my $path= "$source$subpath";
    perhaps_skip_errors {
	my $s= xlstat $path;
	my $fields= join("/", map{ $s->$_ } @STORE_STATFIELDS);
	if ($s->is_dir) {
	    $dirs->xprint("$fields $subpath\0");
	    opendir my $dir, $path
		or die "opendir '$path': $!";
	    while (defined (my $item= readdir $dir)) {
		next if ($item eq "." or $item eq "..");
		my $subpath= "$subpath/$item";
		scanprint ($subpath);
	    }
	    closedir $dir
		or die "closing '$path': $!";
	} else {
	    $files->xprint("$fields $subpath\0");
	}
    };
}

scanprint "";
$_->xclose for ($files, $dirs);

our $sortedfiles= $files->xsortfile($opt_tmp);
$files->xunlink;

if ($opt_dry) {
    print "option --dry-run given, stopping.\n";
    print "sorted files in '".$sortedfiles->path."', dirs in '".$dirs->path."'\n";
    exit 0;
}

# create target directories
{
    my $in= $dirs->reader;
    my $fh= $in->fh;
    local $/="\0";
    while (<$fh>) {
	chomp;
	my ($fields,$subpath)= split " ", $_, 2 or die;
	my $s= stat_from_fields(split "/", $fields);

	my $path= "$target$subpath";
	mkdir $path, $MKDIR_MASK
	  or do {
	      unless ($subpath eq "" and $! == EEXIST) {
		  die "mkdir '$path': $!";
	      }
	  }
    }
    $in->xclose;
}

# copy files
{
    my $fh= $sortedfiles->fh;
    local $/="\0";
    my $cur_s;
    my @paths;
    my $act= sub {
	my ($next_s)=@_;
	{
	    my $firstpath= shift @paths;
	    my $s= $cur_s;
	    my $size= $s->size;
	    perhaps_skip_errors {
		if (not($s->is_file) or $size > $MAX_SMALL_FILE) {
		    # use cp command, if only to get support for holes?
		    xxsystem "cp", "-a", "--", $source.$firstpath, $target.$firstpath;
		} else {
		    my $tpath= $target.$firstpath;
		    xcopy_fast($source.$firstpath, $tpath, $size);
		    utime $s->atime, $s->mtime, $tpath
			or die "utime '$tpath': $!";
		    chown $s->uid, $s->gid, $tpath
			or die "chown '$tpath': $!";
		    chmod $s->permissions, $tpath
			    or die "chmod '$tpath': $!";
		}
	    };
	    for (@paths) {
		xlink $target.$firstpath, $target.$_;
		# (Handle case where some of the target locations are
		# on different filesystems? But can't happen if we
		# enforce mkdir first.)
	    }
	}
	$cur_s= $next_s;
	@paths=();
    };
    while (<$fh>) {
	chomp;
	my ($fields,$path)= split " ", $_, 2 or die;
	my $s= stat_from_fields(split "/", $fields);
	#warn "path='$path'";
	if (defined $cur_s) {
	    if (not $s->same_node($cur_s)) {
		&$act ($s);
	    }
	} else {
	    $cur_s= $s;
	}
	push @paths, $path;
    }
    &$act(undef) if defined $cur_s;
    $sortedfiles->xclose;
    $sortedfiles->xunlink;
}


# copy dir time stamps and permissions
{
    # (partially copy paste again, well)
    my $in= $dirs->reader;
    my $fh= $in->fh;
    local $/="\0";
    while (<$fh>) {
	chomp;
	my ($fields,$subpath)= split " ", $_, 2 or die;
	my $s= stat_from_fields(split "/", $fields);

	perhaps_skip_errors {
	    my $tpath= "$target$subpath";
	    # (and this is copy paste from the file loop)
	    utime $s->atime, $s->mtime, $tpath
		or die "utime '$tpath': $!";
	    chown $s->uid, $s->gid, $tpath
		or die "chown '$tpath': $!";
	    chmod $s->permissions, $tpath
		or die "chmod '$tpath': $!";
	}
    }
    $in->xclose;
}


$dirs->xunlink;


#use Chj::ruse;
#use Chj::Backtrace; # use Chj::repl; repl;
